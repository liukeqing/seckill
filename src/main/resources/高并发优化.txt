优化方向：减少行级锁持有时间
影响高并发的性能瓶颈：串行化，网络延迟，GC
延迟问题很关键：
1.同城机房网络0.5ms-2ms；最大1000qps
2.update后JVM-GC需要话50ms，最大20qps（每秒查询率）
如果是异地机房的网络传输：
	光在真空中传输速度是30万 公里/秒；
	光在玻璃中的传播速度是真空中的2/3；
从北京到上海的往返距离  1300*2 = 2600 公里
	(1300*2) / (300000*2/3) = (13 / 1000) s = 13 毫秒
实际情况是大约20ms

如何判断更新库存成功？
两个条件：
1.update语句自身没有报错。
2.客户端确认update影响记录数。
优化思路：
   把客户端逻辑放到MySQL服务端，避免网络延迟和GC影响。
如何放到MySQL服务端？
两种解决方案：
1.定制SQL方案：update /*+[auto_commit]*/ ,需要修改MySQL源码。
2.使用存储过程：整个事务在MySQL服务端完成。   
	
	
	优化总结
1.前端控制：暴露接口，按钮防重复。
2.动静态数据分离：CDN缓存，后端缓存
3.事务竞争优化：减少事务锁时间	


秒杀操作--并发优化
1.update 减库存    rowLock
		↓  网络延迟   GC
2.INSERT 购买明细
		↓  网络延迟  GC
3.commit/rollback   freeLock

简单优化：
1.insert购买明细→update减库存 rowLock→commit/rollback  freeLock
这样降低了MySQL行级锁的持有时间















	